import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

import java.io.IOException;

public class ElectricityConsumption {

    // Mapper class
    public static class TokenizerMapper
            extends Mapper<Object, Text, IntWritable, DoubleWritable> {

        private final static DoubleWritable consumption = new DoubleWritable();
        private IntWritable year = new IntWritable();

        public void map(Object key, Text value, Context context
        ) throws IOException, InterruptedException {
            String line = value.toString();
            String[] data = line.split("\\s+"); // Tách dữ liệu dựa vào khoảng trắng

            if (data.length > 1) {
                // Lấy năm từ cột đầu tiên
                year.set(Integer.parseInt(data[0]));

                // Lấy mức tiêu thụ trung bình từ cột cuối cùng
                double averageConsumption = Double.parseDouble(data[data.length - 1]);

                // Đặt giá trị mức tiêu thụ trung bình và ghi ra cặp key-value
                consumption.set(averageConsumption);
                context.write(year, consumption);
            }
        }
    }

    // Reducer class
    public static class IntSumReducer
            extends Reducer<IntWritable, DoubleWritable, IntWritable, DoubleWritable> {

        private final static double MAX_THRESHOLD = 30.0; // Ngưỡng tối đa là 30

        public void reduce(IntWritable key, Iterable<DoubleWritable> values, Context context)
                throws IOException, InterruptedException {
            for (DoubleWritable val : values) {
                // So sánh mức tiêu thụ với ngưỡng 30
                if (val.get() > MAX_THRESHOLD) {
                    context.write(key, val); // Chỉ ghi ra nếu lớn hơn 30
                }
            }
        }
    }

    // Hàm chính để cấu hình và chạy Job
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "electricity consumption");

        job.setJarByClass(ElectricityConsumption.class);
        job.setMapperClass(TokenizerMapper.class);
        job.setReducerClass(IntSumReducer.class);

        job.setOutputKeyClass(IntWritable.class);
        job.setOutputValueClass(DoubleWritable.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));  // Đường dẫn đầu vào
        FileOutputFormat.setOutputPath(job, new Path(args[1])); // Đường dẫn đầu ra

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
